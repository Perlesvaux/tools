=== GOOGLE DRIVE ===

When you share an image via Google Drive, you get a link like this:

https://drive.google.com/file/d/1nhbqUPFqqMtmcyFoQ6QUjHOnMtATN9kO/view?usp=sharing

PROBLEM: That link goes to an interface to see the image, not to the image itself, thus it can't be used in an <img> tag.

SOLUTION: Replace "file/d/" with "uc?id=", like this:

https://drive.google.com/uc?id=1nhbqUPFqqMtmcyFoQ6QUjHOnMtATN9kO

That link goes to the image itself, thus it can be used in an <img> tag. You now have free Google Drive image hosting!

=== TWITTER (X) ===

In Twitter (now X), a tweet's link has the form:

twitter.com/<user identifier>/status/<tweet id>

PROBLEM: If you save one such link, the user can change his identifier, rendering your link useless.

SOLUTION: You can use the "anyuser" identifier and the url will redirect to the tweet, with the correct user identifier.

For instance, if you go to:

twitter.com/anyuser/status/541278904204668929

The link redirects to:

https://twitter.com/MarkTabNet/status/541278904204668929

=== === ===

PROBLEM: You want to cite a tweet's video, not the entire tweet, just the video.

SOLUTION: If the link of the tweet (whose video you want to cite) is:

https://twitter.com/LucAuffret/status/1716085946016252251

Simply append "/video/1" to it when writing your citing tweet, like this:

https://twitter.com/LucAuffret/status/1716085946016252251/video/1

If the cited tweet has more than one video, change the number at the end of that URL to pick the one you want.

=== Mercury Mail Server ===

PROBLEM: After installing XAMPP, the PHP function mail() doesn't work out of the box.

To send and receive email, you must have a mail server, the one that comes with XAMPP is Mercury, which can be started on the XAMPP control panel.

Before starting Mercury, follow one of the solutions below:

SOLUTIONS:

1. For local testing in Windows, you don't need an external address to send or receive emails, you can send emails to yourself with Mercury:

  In php.ini, the [mail function] section should look like this (ignoring comments [lines starting with ";"]):

  SMTP=localhost
  smtp_port=25
  sendmail_from = postmaster@localhost
  mail.add_x_header=Off


  "SMTP" stands for Simple Mail Transfer Protocol.

  A mail must have a "From" header. "sendmail_from" indicates the default email address PHP will use in the From header (that is: the default sender address) when calling mail().

  If you don't want to set "sendmail_from" (or if you have but want to use a different sender address) you must pass a From header to mail() (see mail()'s documentation to see how).

  In the Mercury mail server, "postmaster" is an alias for the admin user, its mail is "postmaster@localhost" and its mailbox is at XAMPP > MercuryMail > MAIL > Admin

2. # TO DO.

=== SETUP GIT TO PUSH TO GITHUB ===

PROBLEM: I can't push current local branch to my remote GitHub repo.

CLARIFICATION: Git and GitHub need an email address to sign your commits, so they can be attributed to you (you can run "git log" to see the username and email of the author of each commit). In Git you set the email like this:

git config --global user.email 'your_email@google.com'

GitHub, on the other hand, will prompt you to verify an email address (you can verify a primary email and many backup emails).

In "GitHub > Settings > Emails" you can enable the option "Keep my email addresses private"; if you do, GitHub will sign your commits (and any other contribution activity, like creating a repo, opening a pull request, opening an issue, etc.) with an email address of the form "<numeric_Id>+<your_Username>@users.noreply.github.com" (such that any activity signed with that email will appear in your GitHub contribution graph).

If you don't enable the option "Keep my email addresses private", GitHub will sign your commits with your account's (verified) primary email address (such that any activity signed with that email will appear in your GitHub contribution graph).

SOLUTION:

In Git, set your username and email to be the same as you GitHub's (if you enabled the option "Keep my email addresses private", you must set Git's global "user.email" to your GitHub-given email address of the form "<numeric_Id>+<your_Username>@users.noreply.github.com"), like this:

git config --global user.name 'your_GitHub_Username'
git config --global user.email '<numeric_Id>+<your_Username>@users.noreply.github.com'

Then run:

apt install gh

When the installation is done, run:

gh auth login

And follow the interactive prompts. That's it! Try pushing to a remote repo with:

git push

Or with:

git push origin

If you still can't push, perhaps the remote repo is not mapped to the local repo; check that with:

git remote show

That shows the remote repos mapped to your local repo. If that shows nothing, that means there's no remote repo mapped to your local repo. To map a remote repo to your local repo, run:

git remote add origin github.com/your_GitHub_Username/repo_name

That tells git: "github.com/your_GitHub_Username/repo_name" is the remote that corresponds to this local repo (git should pull from there and push to there), and "origin" will be its local name, such that whenever I refer to "origin" (such as in "git push origin"), I'm talking about "github.com/your_GitHub_Username/repo_name".

You should be able to push after that.

=== SETUP LAMPP (XAMPP) IN LINUX ===

PROBLEM: Setup LAMPP (XAMPP) servers in Linux.

SOLUTION:

1. Download the XAMPP installer for Linux from 'apachefriends.org'.

2. Change the installer's permissions:

chmod 755 xampp-linux-x64-8.2.12-0-installer.run

3. Run the installer:

sudo ./xampp-linux-x64-8.2.12-0-installer.run

4. To start XAMPP, run:

sudo /opt/lampp/lampp start

If you prefer to use the graphical tool, run instead:

cd /opt/lampp

sudo ./manager-linux-x64.run

That's all.

=== EASIEST WAY TO INSTALL NODE & NPM IN LINUX ===

1. Install NVM (Node Version Manager) by running:

curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

2. Check if the installation was successful with:

nvm --version

If that doesn't work, open a new terminal and check again.

3. Install the latest available version of nodejs and npm by running:

nvm install node

That's it!

=== INSTALL DOCKER ENGINE IN LINUX MINT (OR OTHER DISTROS) ===

1. Linux Mint is based on Ubuntu Jammy Jellyfish, so if you have any of them, go to:

https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/

If you have a different version of Linux, go to:

https://download.docker.com/linux/

Then select your distro > 'dists/' > your distro version > 'pool/' > 'stable/' > your CPU architecture

It's a bit tricky to get the relevant info (your distro, your distro version and your CPU architecture) to get to the right place, so let's see an example:

Imagine you have Linux Mint but no one has told you where to go. You can infer you have to choose 'ubuntu' as your distro, and 'jammy' as your distro version by running:

cat /etc/os-release

There you'll see "UBUNTU_CODENAME=jammy".

Then you can know your architecture by running:

hostnamectl

There you'll see "Architecture: x86-64", which means 'amd64'. With all that you know your destination is: https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/

2. Download these .deb files (the Docker Engine, CLI, containerd, and Docker Compose packages):

containerd.io_<version>_<architecture>.deb
docker-ce_<version>_<architecture>.deb
docker-ce-cli_<version>_<architecture>.deb
docker-buildx-plugin_<version>_<architecture>.deb
docker-compose-plugin_<version>_<architecture>.deb

I downloaded these:

containerd.io_1.6.28-1_amd64.deb
docker-ce_25.0.4-1~ubuntu.22.04~jammy_amd64.deb
docker-ce-cli_25.0.4-1~ubuntu.22.04~jammy_amd64.deb
docker-buildx-plugin_0.13.0-1~ubuntu.22.04~jammy_amd64.deb
docker-compose-plugin_2.24.7-1~ubuntu.22.04~jammy_amd64.deb

You can right-click each one, and select "Open With GDebi Package Installer", or install them all at once by opening a terminal in their parent folder (usually the Downloads folder), and running the following (replacing all names with the actual names of your downloaded .deb files):

sudo dpkg -i ./containerd.io_1.6.28-1_amd64.deb \
./docker-ce_25.0.4-1~ubuntu.22.04~jammy_amd64.deb \
./docker-ce-cli_25.0.4-1~ubuntu.22.04~jammy_amd64.deb \
./docker-buildx-plugin_0.13.0-1~ubuntu.22.04~jammy_amd64.deb \
./docker-compose-plugin_2.24.7-1~ubuntu.22.04~jammy_amd64.deb

Verify the installation by downloading and running a test docker image with:

sudo docker run hello-world

If that doesn't work, it might be that the docker service didn't start automatically, so try:

sudo service docker start
sudo docker run hello-world

That's it!

=== LET VS CODE EXTENSIONS RUN DOCKER COMMANDS ===

PROBLEM: VS Code Docker extensions, like 'Dev Containers', run Docker commands in the background, but after installing Docker with the previous tutorial, only the root user and the users in the docker usergroup have permission to run Docker commands.

SOLUTION: You might open VS Code as the root user, but don't do that!

Instead, if you run the following command, you'll notice the Docker installation created an empty 'docker' group:

cat /etc/group

If there's no 'docker' group, you can create it with:

sudo groupadd docker

Add your user to the 'docker' group:

sudo usermod -aG docker $USER

Verify that your user was added to the docker group by running:

groups

That command prints all groups the current user is in; you should see 'docker' there. Now log in to the docker group by running:

newgrp docker

Verify that you're logged in to the docker group by running:

id -gn

That should output 'docker'. Finally, go to a project folder where you need to use a Docker VS Code extension (go there by using 'cd' command in the same terminal where you logged in to the docker group), and open VS Code by running:

code .

That's it! VS Code extensions, like Dev Containers, should now be able to run Docker commands.

=== RUN FREECODECAMP BACKEND CHALLENGES LOCALLY ===

freeCodeCamp's Backend Development and APIs certification has 3 courses:

Managing Packages with NPM
https://github.com/freeCodeCamp/boilerplate-npm/

Basic Node and Express
https://github.com/freeCodeCamp/boilerplate-express/

MongoDB and Mongoose
https://github.com/freeCodeCamp/boilerplate-mongomongoose/

To run any of them locally, follow these steps:

1. Clone the repo of the course you want to do:

git clone https://github.com/freeCodeCamp/boilerplate-npm/

2. Go into the cloned folder:

cd boilerplate-npm

3. Install the node_modules folder by running:

npm install

4. Start the local server at http://localhost:3000/ by running:

npm start

5. After you complete a challenge, submit the link of the local server (http://localhost:3000/) in the "Solution Link" field at freecodecamp.org, while your local server is running.

=== RUN FREECODECAMP DATABASE CHALLENGES LOCALLY ===

PREREQUISITES:

- Docker Engine. (Installation tutorial somewhere above in this document!)
- VS Code.
- Dev Containers extension for VS Code.
- Git.

STEPS:

1. Clone the RDB Alpha repo:

git clone https://github.com/freeCodeCamp/rdb-alpha

2. Go into the cloned folder:

cd rdb-alpha

3. Open VS Code there:

code .

4. Open the VS Code command palette (Ctrl + Shift + P) and run "Dev Containers: Rebuild and Reopen in Container".

5. When the build is done, open the command palette again (Ctrl + Shift + P) and run "CodeRoad: Start".

6. In the CodeRoad window, click "Start New Tutorial".

7. Click the URL tab and enter the URL of the tutorial.json file for the tutorial you want to start. (full list of available tutorials below!)

8. Click the "Start" button to start the lessons.

AVAILABLE TUTORIALS:

Learn Bash by Building a Boilerplate
https://raw.githubusercontent.com/freeCodeCamp/learn-bash-by-building-a-boilerplate/main/tutorial.json

Learn Relational Databases by Building a Mario Database
https://raw.githubusercontent.com/freeCodeCamp/learn-relational-databases-by-building-a-mario-database/main/tutorial.json

Celestial Bodies Database
https://raw.githubusercontent.com/freeCodeCamp/learn-celestial-bodies-database/main/tutorial.json

Learn Bash Scripting by Building Five Programs
https://raw.githubusercontent.com/freeCodeCamp/learn-bash-scripting-by-building-five-programs/main/tutorial.json

Learn SQL by Building a Student Database: Part 1
https://raw.githubusercontent.com/freeCodeCamp/learn-sql-by-building-a-student-database-part-1/main/tutorial.json

Learn SQL by Building a Student Database: Part 2
https://raw.githubusercontent.com/freeCodeCamp/learn-sql-by-building-a-student-database-part-2/main/tutorial.json

World Cup Database
https://raw.githubusercontent.com/freeCodeCamp/learn-world-cup-database/main/tutorial.json

Learn Advanced Bash by Building a Kitty Ipsum Translator
https://raw.githubusercontent.com/freeCodeCamp/learn-advanced-bash-by-building-a-kitty-ipsum-translator/main/tutorial.json

Learn Bash and SQL by Building a Bike Rental Shop
https://raw.githubusercontent.com/freeCodeCamp/learn-bash-and-sql-by-building-a-bike-rental-shop/main/tutorial.json

Salon Appointment Scheduler
https://raw.githubusercontent.com/freeCodeCamp/learn-salon-appointment-scheduler/main/tutorial.json

Learn Nano by Building a Castle
https://raw.githubusercontent.com/freeCodeCamp/learn-nano-by-building-a-castle/main/tutorial.json

Learn Git by Building an SQL Reference Object
https://raw.githubusercontent.com/freeCodeCamp/learn-git-by-building-an-sql-reference-object/main/tutorial.json

Periodic Table Database
https://raw.githubusercontent.com/freeCodeCamp/learn-periodic-table-database/main/tutorial.json

Number Guessing Game
https://raw.githubusercontent.com/freeCodeCamp/learn-number-guessing-game/main/tutorial.json
